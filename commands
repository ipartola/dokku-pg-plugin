#!/usr/bin/env bash
source "$(dirname $0)/../common/functions"
set -o pipefail; [[ $DOKKU_TRACE ]] && set -x
set +e

# Check if app name is specified
if [[ $1 == postgresql ]] || [[ $1 == postgresql:* ]]; then
    # plugin defaults
    source "$(dirname $0)/defaults"

    if [[ -z $2 ]]; then
        dokku_log_fail "You must specify an app name"
    else
        APP="$2"
    fi
    if [[ ! -d "$PLUGIN_PATH/link" ]]; then
        dokku_log_fail "Link plugin not found... Did you install it from https://github.com/rlaneve/dokku-link?"
    fi

    PLUGIN_FLAG_PERSISTANCE_FILE="$DOKKU_ROOT/$APP/$PERSISTANCE_FILE"
    CONTAINER_NAME="${PLUGIN_NAME}-${APP}"
    HOST_DIR="$DOKKU_ROOT/.$PLUGIN_NAME/$APP"
fi

case "$1" in

  postgresql)
    CONTAINERS=$(ls -1 "$DOKKU_ROOT/.$PLUGIN_NAME/" | awk '{print $1}')
    dokku_log_info2 "PostgreSQL containers:"
    for CONTAINER in $CONTAINERS; do
        dokku_log_verbose "$CONTAINER"
    done
    ;;
    
  postgresql:enable)
    verify_app_name "$APP"
    dokku_log_info1 "Enabling Postgresql for $APP..."
    touch "$PLUGIN_FLAG_PERSISTANCE_FILE"
    dokku_log_info2 "Postgresql enabled for $APP"
    dokku_log_verbose "Postgresql will be started on next app build / deploy"
    ;;

  postgresql:create)
    # Check if Postgresql image is installed
    IMAGE=$(docker images | grep "$CONTAINER_IMAGE" |  awk '{print $3}')
    if [[ -z $IMAGE ]]; then
        dokku_log_fail "PostgreSQL image not found... Did you run 'dokku plugins-install' ?"
    fi
    # check for existing container with the same persistent Postgresql
    ID=$(docker ps -a | grep "$CONTAINER_NAME" |  awk '{print $1}')
    if [[ ! -z "$ID" ]]; then
        dokku_log_fail "Container $CONTAINER_NAME already exist. Please use rebuild or delete command"
    fi
    if [[ ! -d "$HOST_DIR" ]]; then
        mkdir -p "$HOST_DIR"
    fi
    # Check if an existing storage volume exists
    if [[ -d "$HOST_DIR/volume" ]]; then
        dokku_log_info1 "Reusing $PLUGIN_NAME/$APP storage"
    else
        mkdir -p "$HOST_DIR/volume"
        # Generate random password for users
        DB_PASSWORD=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c 16)
        echo $DB_PASSWORD > "$HOST_DIR/pwd"
        chmod 600 "$HOST_DIR/pwd"
    fi
    DB_PASSWORD=$(cat "$HOST_DIR/pwd")
    VOLUME="$HOST_DIR/volume:/opt/postgresql"
    # Launch container
    ID=$(docker run -v $VOLUME --name=$CONTAINER_NAME -d $CONTAINER_IMAGE /usr/bin/start-pgsql.sh $DB_PASSWORD)
    sleep 1
    # Link to a potential existing app
    dokku postgresql:link $APP $APP
    dokku_log_info2 "Postgresql started:"
    dokku_log_verbose "Application: $APP"
    dokku_log_verbose "Postgresql: $CONTAINER_NAME (using $CONTAINER_IMAGE)"
    ;;
  
  postgresql:rebuild)
    ID=$(docker ps -a | grep "$CONTAINER_NAME" |  awk '{print $1}')
    if [[ ! -z "$ID" ]]; then
        dokku_log_info1 "Stopping & removing $CONTAINER_NAME container"
        docker stop $ID > /dev/null
        docker rm $ID > /dev/null
    fi
    dokku postgresql:create $APP
    ;;

  postgresql:clone)
    # Check argument
    if [[ -z $3 ]]; then
        dokku_log_fail "You must specify a name for the clone"
    fi
    TARGET_DIR="$DOKKU_ROOT/.$PLUGIN_NAME/$3"
    if [[ -d "$TARGET_DIR" ]]; then
        dokku_log_fail "Persistent storage for ${PLUGIN_NAME}-$3 already exists"
    fi
    dokku_log_info1 "Cloning $PLUGIN_NAME/$APP storage"
    #FIXME: fix the access rights issue
    #cp -rf "$HOST_DIR" "$TARGET_DIR"
    #dokku postgresql:rebuild $3 > /dev/null
    #echo
    #echo "-----> $PLUGIN_NAME/$APP storage cloned to $PLUGIN_NAME/$3"
    dokku_log_warn "[Attention]: This command needs access right fix, for now issue following command as root"
    dokku_log_verbose "cp -rf ${HOST_DIR} ${TARGET_DIR}"
    dokku_log_warn "and manualy rebuild ${PLUGIN_NAME}-${3} container"
    dokku_log_verbose "dokku postgresql:rebuild $3"
    ;;

  postgresql:destroy)
    confirmed=0
    while [[ $confirmed -eq 0 ]]
    do
        dokku_log_warn "WARNING: Potentially Destructive Action"
        dokku_log_warn "This command will destroy the Postgresql instance for"
        dokku_log_warn "$APP (including all volumes and data)."
        dokku_log_warn "To proceed, type \"$APP\""

        read -p "> " app_name_verification
        if [[ "$app_name_verification" != "$APP" ]]; then
            dokku_log_warn "Confirmation did not match."
        else
            confirmed=1
        fi
    done
    dokku_log_info1 "Destroying Postgresql for $APP..."
    
    [[ -f "$PLUGIN_FLAG_PERSISTENCE_FILE" ]] && rm "$PLUGIN_FLAG_PERSISTENCE_FILE"

    ID=$(docker ps -a | grep "$CONTAINER_NAME" |  awk '{print $1}')
    
    # Stop and remove the container    
    if [[ ! -z $ID ]]; then
        docker stop $ID > /dev/null
        docker rm $ID > /dev/null
    fi

    if [[ ! -d "$DOKKU_ROOT/$APP" ]]; then
        # Remove docker link
        dokku link:delete "$APP" "$CONTAINER_NAME" "$PLUGIN_ALIAS"
    
        # Unset variables
        dokku config:unset "$APP" "DB_SCHEME" "DB_USERNAME" "DB_PASSWORD" "DB_PATH"
    fi

    # Remove persistent volume
    if [[ -d "$HOST_DIR" ]]; then
        rm -rf "$HOST_DIR"
    fi
    dokku_log_info2 "Postgresql instance / volume destroyed:"
    dokku_log_verbose "Application: $APP"
    ;;

  postgresql:info)
    ID=$(docker ps -a | grep "$CONTAINER_NAME" |  awk '{print $1}')
    IP=$(docker inspect $ID | grep IPAddress | awk '{ print $2 }' | tr -d ',"')
    DOCKER_GATEWAY=$(docker inspect $ID | grep Gateway | awk '{ print $2 }' | tr -d ',"')
    dokku_log_info2 "Postgresql info:"
    dokku_log_verbose "Application: $APP"
    dokku_log_verbose "Postgresql: $CONTAINER_NAME (using $CONTAINER_IMAGE)"
    dokku_log_verbose "Host: $IP"
    dokku_log_verbose "Gateway: $DOCKER_GATEWAY"
    dokku_log_verbose "Secret port: $DB_PORT"
    ;;

  postgresql:link)
    verify_app_name "$APP"
    # Check argument
    if [[ -z $3 ]]; then
        dokku_log_fail "You must specify a container name"
    fi
    CONTAINER_NAME="${PLUGIN_NAME}-$3"
    if [[ ! -f "$HOST_DIR/pwd" ]]; then
        dokku_log_warn "Postgresql is not correctly initialized"
        exit 0
    fi
    #ID=$(docker ps -a | grep "$CONTAINER_NAME" |  awk '{print $1}')
    #IP=$(docker inspect $ID | grep IPAddress | awk '{ print $2 }' | tr -d ',"')
    DB_PASSWORD=$(cat "$HOST_DIR/pwd")

    dokku link:create "$APP" "$CONTAINER_NAME" "$PLUGIN_ALIAS"
    dokku config:set $APP "DB_SCHEME=postgresql" "DB_USERNAME=root" "DB_PASSWORD=$DB_PASSWORD" "DB_PATH=/db"
    dokku_log_info1 "$APP linked to $CONTAINER_NAME container"
    ;;

  postgresql:logs)
    ID=$(docker ps -a | grep "$CONTAINER_NAME" |  awk '{print $1}')
    if [[ $3 == "-t" ]]; then
        docker logs --follow $ID
    else
        docker logs $ID | tail -n 100
    fi
    ;;

  help)
    cat && cat<<EOF
    postgresql                                      Display list of PostgreSQL containers
    postgresql:enable <app>                         Enable PostgreSQL for an <app>  for next build
    postgresql:create <app>                         Create a PostgreSQL container for <app>
    postgresql:clone <app> <trg>                    Clone PostgreSQL container of <app> for <trg>
    postgresql:rebuild <app>                        Rebuild PostgreSQL container of <app> (keep persistend data)
    postgresql:destroy <app>                        Delete PostgreSQL container and all PostgreSQL persistant files for <app>
    postgresql:info <app>                           Display <app> PostgreSQL container informations
    postgresql:link <app> <pgsql>                   Link an app to a PostgreSQL container
    postgresql:logs <app> [-t]                      Display last logs from <app> PostgreSQL container (-t follow)
EOF
    ;;

  *)
    exit $DOKKU_NOT_IMPLEMENTED_EXIT
    ;;
esac
